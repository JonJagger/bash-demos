{"cyber-dojo.sh":"chmod +x *.sh\n./test_*.sh\n","output":"test_greater_writing_stdout_to_a_file\ntest_greater_greater_appending_stdout_to_a_file\ntest_less_than_reading_stdout_from_a_file\ntest_redirecting_stderr_to_a_file\n~~~~~\n~~~~~\n~~~~~\n~~~~~\n\nRan 4 tests.\n\nOK\n","instructions":"\nLearning i/o redirection.","test_io_redirection.sh":"#!/bin/bash\n\nfunction test_greater_writing_stdout_to_a_file()\n{\n  assertFalse \"[ -e copy.txt ]\"\n  cat shunit2_help.txt > copy.txt\n  assertTrue  \"[ -e copy.txt ]\"\n  local d=$(diff copy.txt shunit2_help.txt)\n  assertTrue \"[ -z $d ]\"\n  rm copy.txt\n}\n\nfunction test_greater_greater_appending_stdout_to_a_file()\n{\n  assertFalse \"[ -e copy.txt ]\"\n  cat shunit2_help.txt > copy.txt\n  assertTrue  \"[ -e copy.txt ]\"\n  cat shunit2_help.txt >> copy.txt\n  local d=$(diff copy.txt shunit2_help.txt)\n  assertFalse \"[ -z $d ]\"\n  rm copy.txt  \n}\n\nfunction test_less_than_reading_stdout_from_a_file()\n{\n  local e1=$(wc -L shunit2_help.txt)\n  local longestLine_e1=$(echo $e1 | awk '{print $1}')\n  assertEquals \"86\" $longestLine_e1\n  \n  local e2=$(wc -L < shunit2_help.txt)\n  local longestLine_e2=$(echo $e2 | awk '{print $1}')\n  assertEquals \"86\" $longestLine_e2\n}\n\nfunction test_redirecting_stderr_to_a_file()\n{\n   cat -3 shunit2_help.txt 2> error.log\n   echo \"~~~~~\"\n   #cat error.log\n   echo \"~~~~~\"\n   local topLine=$(head -1 error.log)\n   echo \"~~~~~\"\n   #cat $topLine\n   echo \"~~~~~\"\n}\n\n# load and run shUnit2\nsource shunit2\n","shunit2_help.txt":"\nshunit2 help is online at\nhttps://github.com/zandev/shunit2/blob/master/doc/shunit2.txt\nhttp://shunit2.googlecode.com/svn/trunk/source/2.1/doc/shunit2.html#function-reference\n\nSummary\n-------\ntest functions must start with test. \n\nassertEquals [message] expected actual\nassertNotEquals [message] expected actual\nassertSame [message] expected actual\nassertNotSame [message] unexpected actual\nassertNull [message] value\nassertNotNull [message] value\nassertTrue [message] condition\nassertFalse [message] condition\nfail [message]\n\noneTimeSetUp\n    called once before any tests are run\nsetUp\n    called once before each test is run\ntearDown\n    called once after each test is run\noneTimeTearDown\n    called once after all tests are run\n\n"}