{"test_hiker.sh":"#!/bin/bash\n\n. ./hiker.sh\n\nfunction test_dollar_var_in_curly_brackets_is_parameter_expansion()\n{\n  # Note: you cannot put spaces on either side of the = \n  local wibble=42\n  # Note: there is no comma between the two arguments  \n  assertEquals 42 ${wibble}\n}\n\nfunction test_dollar_var_is_parameter_expansion()\n{\n  local wibble=\"Hello\"\n  assertEquals \"Hello\" $wibble\n}\n\nfunction test_importance_of_quoting()\n{\n  local expected=\"hello world\"\n  local actual=\"hello world\"\n  # Ensure assertEquals gets two arguments\n  assertEquals \"${expected}\" \"${actual}\"\n}\n\nfunction test_dollar_double_round_parentheses_is_an_arithmetic_expression()\n{\n  assertEquals 42 $((6 * 7))\n}\n\nfunction test_double_round_parenthesis_is_arithmetic_instruction()\n{\n  local x=42\n  # without (( )) this would give \"x++ command not found\"\n  ((x++))\n  assertEquals 43 ${x}\n}\n\nfunction test_dollar_single_round_parenthesis_is_command_substitution()\n{\n  # answer() is in hiker.sh\n  assertEquals \"6 * 9\" \"$(answer)\"\n}\n\nfunction test_double_quotes_interpolate()\n{\n  local wibble=42\n  assertEquals \"42\" \"${wibble}\"\n}\n\nfunction test_single_quotes_dont_interpolate()\n{\n  local wibble=42\n  assertEquals '${wibble}' '${wibble}'\n}\n\nfunction test_double_square_brackets_are_a_conditional()\n{\n  assertTrue  \"[[ 'x' == 'x' ]]\"\n  assertFalse \"[[ 'y' == 'x' ]]\"\n}\n\nfunction test_single_square_brackets_are_also_a_conditional()\n{\n  assertTrue  \"[ 'x' == 'x' ] && [ 'y' == 'y' ]\"\n  assertFalse \"[ 'x' == 'x' ] && [ 'y' == 'x' ]\"\n}\n\nfunction test_minus_e_for_file_existence() \n{\n  assertTrue  \"test -e help.txt\"\n  assertTrue  \"[ -e help.txt ]\"\n  local filename=\"help.txt\"\n  assertTrue  \"test -e $filename\"\n  assertTrue  \"[ -e $filename ]\"\n\n\n\n  assertFalse \"[ -w wibble.txt ]\"\n  local notThere=\"wibble.txt\"\n  assertFalse \"[ -e $notThere ]\"\n}\n\nfunction test_minus_z_for_emptyness()\n{\n  local empty=\"\"\n  assertTrue \"[ -z $empty ]\"\n  local notEmpty=\"x\"\n  assertTrue \"[ ! -z $notEmpty ]\"\n}\n\nfunction test_single_round_parenthesis_is_a_subshell()\n{\n  local myDir=${PWD}\n  (cd /)\n  assertTrue \"${PWD} is under /sandboxes\" \"[[ ${PWD} =~ /sandboxes* ]]\"\n  cd /\n  assertFalse \"${PWD} is under /sandboxes\" \"[[ ${PWD} =~ /sandboxes* ]]\"\n  cd ${myDir}\n}\n\nfunction test_every_command_is_a_conditional() \n{\n  local myDir=${PWD}\n  local msg=\"\"\n  if cd /does/not/exist 2> /dev/null ; then\n    msg=\"You don't get here.\"\n  fi\n  assertTrue \"[ -z $msg ]\"\n  \n  msg=\"\"\n  if cd /etc ; then\n    msg=\"You do get here\"\n  fi\n  assertFalse \"[ -z $msg ]\"\n  cd ${myDir}\n}\n\n# load and run shUnit2\n. shunit2\n\n","help.txt":"\nshunit2 help is online at\nhttps://github.com/zandev/shunit2/blob/master/doc/shunit2.txt\nhttp://shunit2.googlecode.com/svn/trunk/source/2.1/doc/shunit2.html#function-reference\n\nSummary\n-------\ntest functions must start with test. \n\nassertEquals [message] expected actual\nassertNotEquals [message] expected actual\nassertSame [message] expected actual\nassertNotSame [message] unexpected actual\nassertNull [message] value\nassertNotNull [message] value\nassertTrue [message] condition\nassertFalse [message] condition\nfail [message]\n\noneTimeSetUp\n    called once before any tests are run\nsetUp\n    called once before each test is run\ntearDown\n    called once after each test is run\noneTimeTearDown\n    called once after all tests are run\n\n","hiker.sh":"#!/bin/bash\n\nfunction answer()\n{\n  echo \"6 * 9\"\n}\n","cyber-dojo.sh":"chmod +x *.sh\n./test_*.sh\n\n","output":"test_dollar_var_in_curly_brackets_is_parameter_expansion\ntest_dollar_var_is_parameter_expansion\ntest_importance_of_quoting\ntest_dollar_double_round_parentheses_is_an_arithmetic_expression\ntest_double_round_parenthesis_is_arithmetic_instruction\ntest_dollar_single_round_parenthesis_is_command_substitution\ntest_double_quotes_interpolate\ntest_single_quotes_dont_interpolate\ntest_double_square_brackets_are_a_conditional\ntest_single_square_brackets_are_also_a_conditional\ntest_minus_e_for_file_existence\ntest_minus_z_for_emptyness\ntest_single_round_parenthesis_is_a_subshell\ntest_every_command_is_a_conditional\n\nRan 14 tests.\n\nOK\n","instructions":"\nThis is an instructor-led exercise.\nThere are no written instructions.\nYour instructor will explain the exercise.\n"}