{"cyber-dojo.sh":"chmod +x *.sh\n./test_*.sh\n\n","output":"test_calling_a_function_has_no_parentheses_and_no_commas\ntest_dollar_var_in_curly_brackets_is_parameter_expansion\ntest_dollar_var_is_parameter_expansion\ntest_quoting_something_makes_it_one_thing\ntest_dollar_two_round_parentheses_is_an_arithmetic_expression\ntest_two_round_parenthesis_no_dollar_is_an_arithmetic_instruction\ntest_dollar_one_round_parenthesis_is_command_substitution\ntest_double_quotes_interpolate\ntest_single_quotes_dont_interpolate\ntest_two_square_brackets_are_a_conditional\ntest_one_square_bracket_is_also_a_conditional\ntest_minus_e_for_file_existence\ntest_minus_z_for_emptyness\ntest_one_round_parenthesis_is_a_subshell\ntest_every_command_is_a_conditional\ntest_every_command_sets_status_zero_means_success\n\nRan 16 tests.\n\nOK\n","instructions":"\nLearning bash scripting.","sum.sh":"#!/bin/bash\n\nfunction sum()\n{\n  echo $(($1 + $2))\n}\n","test_bash.sh":"#!/bin/bash\n\nsource ./answer.sh\nsource ./sum.sh\n\ntest_calling_a_function_has_no_parentheses_and_no_commas()\n{\n  # Note: you cannot put spaces on either side of the = \n  local expected=42\n  local actual=$(sum 40 2)\n  assertEquals $expected $actual\n}\n\ntest_dollar_var_in_curly_brackets_is_parameter_expansion()\n{\n  local wibble=42\n  assertEquals 42 ${wibble}\n}\n\ntest_dollar_var_is_parameter_expansion()\n{\n  local wibble=\"Hello\"\n  assertEquals \"Hello\" $wibble\n}\n\ntest_quoting_something_makes_it_one_thing()\n{\n  local expected=\"hello world\"\n  local actual=\"hello world\"\n  assertEquals \"${expected}\" \"${actual}\"\n}\n\ntest_dollar_two_round_parentheses_is_an_arithmetic_expression()\n{\n  assertEquals 42 $((6 * 7))\n}\n\ntest_two_round_parenthesis_no_dollar_is_an_arithmetic_instruction()\n{\n  local x=42\n  # without (( )) this gives \"x++ command not found\"\n  ((x++))\n  assertEquals 43 ${x}\n}\n\ntest_dollar_one_round_parenthesis_is_command_substitution()\n{\n  # answer() is in hiker.sh\n  assertEquals \"54\" \"$(answer)\"\n}\n\ntest_double_quotes_interpolate()\n{\n  local wibble=42\n  assertEquals \"42\" \"${wibble}\"\n}\n\ntest_single_quotes_dont_interpolate()\n{\n  local wibble=42\n  assertEquals '${wibble}' '${wibble}'\n}\n\ntest_two_square_brackets_are_a_conditional()\n{\n  assertTrue  \"[[ 'x' == 'x' ]]\"\n  assertFalse \"[[ 'y' == 'x' ]]\"\n}\n\ntest_one_square_bracket_is_also_a_conditional()\n{\n  assertTrue  \"[ 'x' == 'x' ] && [ 'y' == 'y' ]\"\n  assertFalse \"[ 'x' == 'x' ] && [ 'y' == 'x' ]\"\n}\n\ntest_minus_e_for_file_existence() \n{\n  assertTrue  \"test -e sum.sh\"\n  assertTrue  \"[ -e sum.sh ]\"\n  local filename=\"sum.sh\"\n  assertTrue  \"test -e $filename\"\n  assertTrue  \"[ -e $filename ]\"\n\n  assertFalse \"test -w wibble.txt\"\n  assertFalse \"[ -w wibble.txt ]\"\n  local notThere=\"wibble.txt\"\n  assertFalse \"test -e $notThere\"\n  assertFalse \"[ -e $notThere ]\"\n}\n\ntest_minus_z_for_emptyness()\n{\n  local empty=\"\"\n  assertTrue \"test -z $empty\"\n  assertTrue \"[ -z $empty ]\"\n  local notEmpty=\"x\"\n  assertTrue \"test ! -z $notEmpty\"\n  assertTrue \"[ ! -z $notEmpty ]\"\n}\n\ntest_one_round_parenthesis_is_a_subshell()\n{\n  local myDir=${PWD}\n  (cd /)\n  assertTrue \"${PWD} is under /sandboxes\" \"[[ ${PWD} =~ /sandboxes* ]]\"\n  cd /\n  assertFalse \"${PWD} is under /sandboxes\" \"[[ ${PWD} =~ /sandboxes* ]]\"\n  cd ${myDir}\n}\n\ntest_every_command_is_a_conditional() \n{\n  local msg=\"\"\n  if cd /does/not/exist 2> /dev/null ; then\n    msg=\"You don't get here.\"\n  fi\n  assertTrue \"[ -z $msg ]\"\n  \n  msg=\"\"\n  if cd /etc ; then\n    msg=\"You do get here\"\n  fi\n  assertFalse \"[ -z $msg ]\"\n  cd - > /dev/null   # go back to previous dir\n}\n\ntest_every_command_sets_status_zero_means_success()\n{\n  cd /does/not/exist 2> /dev/null\n  assertNotEquals 0 $?\n  cd /etc \n  assertEquals 0 $?  \n  cd - > /dev/null   # go back to previous dir  \n}\n\n# load and run shUnit2\nsource shunit2\n\n","answer.sh":"#!/bin/bash\n\nanswer()\n{\n  echo $((6 * 9))\n}\n","shunit2_help.txt":"\nshunit2 help is online at\nhttps://github.com/zandev/shunit2/blob/master/doc/shunit2.txt\nhttp://shunit2.googlecode.com/svn/trunk/source/2.1/doc/shunit2.html#function-reference\n\nSummary\n-------\ntest functions must start with test. \n\nassertEquals [message] expected actual\nassertNotEquals [message] expected actual\nassertSame [message] expected actual\nassertNotSame [message] unexpected actual\nassertNull [message] value\nassertNotNull [message] value\nassertTrue [message] condition\nassertFalse [message] condition\nfail [message]\n\noneTimeSetUp\n    called once before any tests are run\nsetUp\n    called once before each test is run\ntearDown\n    called once after each test is run\noneTimeTearDown\n    called once after all tests are run\n\n"}