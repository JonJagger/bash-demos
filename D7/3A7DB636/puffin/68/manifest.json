{"cyber-dojo.sh":"chmod +x *.sh\n./test_*.sh\n","output":"test_pwd_to_print_current_working_dir\ntest_cd_to_change_directory\ntest_ls_to_list_contents_of_current_dir\ntest_ls_dir_to_list_contents_of_given_dir\ntest_dot_means_the_current_dir\ntest_dot_dot_means_the_parent_dir\ntest_mkdir_makes_a_dir_and_rmdir_removes_an_empty_dir\ntest_mkdir_p_makes_a_dir_and_intermediate_dirs\ntest_rm_removes_a_file\ntest_rm_rf_recursively_forces_dir_removal\ntest_cp_copies_a_file\ntest_mv_moves_a_file\ntest_finding_a_file_by_name\ntest_finding_a_file_by_content\n\nRan 14 tests.\n\nOK\n","instructions":"\nLearning about the file-system.","shunit2_help.txt":"\nshunit2 help is online at\nhttps://github.com/zandev/shunit2/blob/master/doc/shunit2.txt\nhttp://shunit2.googlecode.com/svn/trunk/source/2.1/doc/shunit2.html#function-reference\n\nSummary\n-------\ntest functions must start with test. \n\nassertEquals [message] expected actual\nassertNotEquals [message] expected actual\nassertSame [message] expected actual\nassertNotSame [message] unexpected actual\nassertNull [message] value\nassertNotNull [message] value\nassertTrue [message] condition\nassertFalse [message] condition\nfail [message]\n\noneTimeSetUp\n    called once before any tests are run\nsetUp\n    called once before each test is run\ntearDown\n    called once after each test is run\noneTimeTearDown\n    called once after all tests are run\n\n","test_file-system.sh":"#!/bin/bash\n\ntest_pwd_to_print_current_working_dir()\n{\n  local expected=\"/sandboxes/puffin\"\n  assertEquals ${expected} $(pwd)\n  assertEquals ${expected} ${PWD}  \n}\n\ntest_cd_to_change_directory()\n{\n  cd /etc\n  assertEquals \"/etc\" ${PWD}\n  cd - > /dev/null\n}\n\ntest_ls_to_list_contents_of_current_dir()\n{\n  local lsOutput=$(ls)\n  local first=$(echo $lsOutput | awk '{print $1}')\n  assertEquals \"cyber-dojo.sh\" $first\n}\n\ntest_ls_dir_to_list_contents_of_given_dir()\n{\n  local lsOutput=$(ls /etc)\n  local first=$(echo $lsOutput | awk '{print $1}')\n  assertEquals \"TZ\" $first  \n}\n\ntest_dot_means_the_current_dir()\n{\n  local lsOutput=$(ls .)\n  local first=$(echo $lsOutput | awk '{print $1}')\n  assertEquals \"cyber-dojo.sh\" $first  \n}\n\ntest_dot_dot_means_the_parent_dir()\n{\n  local lsOutput=$(ls ..)\n  local first=$(echo $lsOutput | awk '{print $1}')\n  assertEquals \"puffin\" $first  \n}\n\ntest_mkdir_makes_a_dir_and_rmdir_removes_an_empty_dir()\n{\n  assertFalse \"[ -d mydir ]\"\n  mkdir mydir\n  assertTrue  \"[ -d mydir ]\"\n  rmdir mydir\n  assertFalse \"[ -d mydir ]\"\n}\n\ntest_mkdir_p_makes_a_dir_and_intermediate_dirs()\n{\n  assertFalse \"[ -d my/dir/ect ]\"\n  mkdir my/dir/ect 2> /dev/null\n  assertNotEquals 0 $?\n  assertFalse \"[ -d my/dir/ect ]\"\n  \n  mkdir -p my/dir/ect\n  assertEquals 0 $?\n  assertTrue  \"[ -d my/dir/ect ]\"\n  rmdir my/dir/ect\n  rmdir my/dir\n  rmdir my\n  assertFalse \"[ -d my ]\"\n}\n\ntest_rm_removes_a_file()\n{\n  echo \"Hello\" > /tmp/hello.txt\n  assertTrue  \"[ -f /tmp/hello.txt ]\"\n  rm /tmp/hello.txt\n  assertEquals 0 $?\n  assertFalse \"[ -f /tmp/hello.txt ]\"\n}\n\ntest_rm_rf_recursively_forces_dir_removal() \n{\n  mkdir -p my/dir/ect\n  rm -rf my\n  assertEquals 0 $?\n  assertFalse \"[ -d my ]\"\n}\n\ntest_cp_copies_a_file()\n{\n  assertFalse \"[ -e /tmp/shunit2_help.txt ]\"\n  cp shunit2_help.txt /tmp\n  assertEquals 0 $?\n  assertTrue \"[ -e ./shunit2_help.txt ]\"\n  assertTrue \"[ -e /tmp/shunit2_help.txt ]\"\n  rm /tmp/shunit2_help.txt\n}\n\ntest_mv_moves_a_file()\n{\n  assertFalse \"[ -e /tmp/shunit2_help.txt ]\"\n  mv shunit2_help.txt /tmp\n  assertEquals 0 $?\n  assertFalse \"[ -e ./shunit2_help.txt ]\"\n  assertTrue  \"[ -e /tmp/shunit2_help.txt ]\"\n  rm /tmp/shunit2_help.txt\n}\n\ntest_finding_a_file_by_name()\n{\n  local d=$(find /etc -name \"*.d\")\n  local count=$(echo ${d} | wc | awk '{print $2}')\n  assertEquals \"14\" ${count}\n}\n\ntest_finding_a_file_by_content()\n{\n  # -r = recursive\n  # -l = show only filenames\n  # -e = regexp pattern follows\n  local filenames=$(grep -rl /etc -e puffin 2> /dev/null)  \n  local expected=$(printf \"%s\\n%s\" \"/etc/passwd\" \"/etc/group\")\n  assertEquals \"$expected\" \"$filenames\"\n}\n\n# load and run shUnit2\nsource shunit2\n"}