{"output":"test_using_a_pipe_to_get_line_18_of_help_text_file\ntest_finding_the_name_of_the_largest_file_in_etc_dir\ntest_append_the_output_of_ls_to_a_file\ntest_get_permission_type_count_in_etc_dir\ntest_list_first_three_subdirs_of_etc_dir_alphabetically\n\nRan 5 tests.\n\nOK\n","cyber-dojo.sh":"chmod +x *.sh\n./test_*.sh\n","instructions":"\nLearning piping unix commands together.","test_piping.sh":"#!/bin/bash\n\ntest_using_a_pipe_to_get_line_18_of_help_text_file()\n{\n  local expected=\"fail [message]\"\n  local actual=$(head -18 shunit2_help.txt | tail -1)\n  assertEquals \"${expected}\" \"${actual}\"\n}\n\ntest_finding_the_name_of_the_largest_file_in_etc_dir()\n{\n  local expected=\"services\"\n  local actual=$(ls -l /etc | sort -k5rn | head -1 | awk '{print $9}')\n  assertEquals \"${expected}\" \"${actual}\"  \n}\n\ntest_append_the_output_of_ls_to_a_file()\n{\n  echo \"Hello\" > simple.txt\n  ls -al /etc >> simple.txt\n  local count=$(wc -l simple.txt | awk '{print $1}')\n  assertEquals \"43\" \"${count}\"\n}\n\ntest_get_permission_type_count_in_etc_dir()\n{\n  local count=$(ls -al /etc | tail -n+2 | awk '{print $1}' | sort | uniq | wc -l)\n  assertEquals \"4\" \"${count}\"\n}\n\ntest_list_first_three_subdirs_of_etc_dir_alphabetically()\n{\n  local expected=$(printf \"%s\\n%s\\n%s\" \"apk\" \"conf.d\" \"crontabs\")\n  local actual=$(ls -l /etc | grep ^d | awk '{print $9}' | sort | head -3)\n  assertEquals \"${expected}\" \"${actual}\"  \n}\n\n# load and run shUnit2\nsource shunit2\n","shunit2_help.txt":"\nshunit2 help is online at\nhttps://github.com/zandev/shunit2/blob/master/doc/shunit2.txt\nhttp://shunit2.googlecode.com/svn/trunk/source/2.1/doc/shunit2.html#function-reference\n\nSummary\n-------\ntest functions must start with test. \n\nassertEquals [message] expected actual\nassertNotEquals [message] expected actual\nassertSame [message] expected actual\nassertNotSame [message] unexpected actual\nassertNull [message] value\nassertNotNull [message] value\nassertTrue [message] condition\nassertFalse [message] condition\nfail [message]\n\noneTimeSetUp\n    called once before any tests are run\nsetUp\n    called once before each test is run\ntearDown\n    called once after each test is run\noneTimeTearDown\n    called once after all tests are run\n\n","sort_help.txt":"Usage: sort [-nrugMcszbdfiokt] [-o FILE] [-k start[.offset][opts][,end[.offset][opts]] [-t CHAR] [FILE]...\n\nSort lines of text\n\n\t-o FILE\tOutput to FILE\n\t-c\tCheck whether input is sorted\n\t-b\tIgnore leading blanks\n\t-f\tIgnore case\n\t-i\tIgnore unprintable characters\n\t-d\tDictionary order (blank or alphanumeric only)\n\t-g\tGeneral numerical sort\n\t-M\tSort month\n\t-n\tSort numbers\n\t-t CHAR\tField separator\n\t-k N[,M] Sort by Nth field\n\t-r\tReverse sort order\n\t-s\tStable (don't sort ties alphabetically)\n\t-u\tSuppress duplicate lines\n\t-z\tLines are terminated by NUL, not newline\n"}